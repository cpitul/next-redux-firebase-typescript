import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { LS, StateStatus } from '@utils/declarations/enums';
import { AuthErrors, User } from '@utils/declarations/types';
import { handleLoginBuilder } from './authBuilders';

export interface AuthState {
	status: StateStatus;
	isLogged: boolean;
	user: User;
	errors: Partial<AuthErrors>;
}

export const initialAuthState: AuthState = {
	status: StateStatus.idle,
	// TODO - maybe implement a server side state for isLogged to replace the ": false" part
	isLogged: typeof window !== 'undefined' ? JSON.parse(localStorage.getItem(LS.LANG) ?? 'false') : false,
	user: null,
	errors: {},
};

export const authSlice = createSlice({
	name: 'auth',
	initialState: initialAuthState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		updateAuthUser: (state: AuthState, action: PayloadAction<Partial<User>>) => {
			state.user = action.payload === null ? null : ({ ...state.user, ...action.payload } as User);
		},
		setAuthIsLogged: (state: AuthState, action: PayloadAction<boolean>) => {
			state.isLogged = action.payload;
		},
		setAuthErrors: (state: AuthState, action: PayloadAction<Partial<AuthErrors>>) => {
			state.errors = action.payload;
		},
		setAuthStatus: (state: AuthState, action: PayloadAction<StateStatus>) => {
			state.status = action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: builder => {
		handleLoginBuilder(builder);
	},
});

export const { updateAuthUser, setAuthIsLogged, setAuthErrors, setAuthStatus } = authSlice.actions;
export default authSlice.reducer;
